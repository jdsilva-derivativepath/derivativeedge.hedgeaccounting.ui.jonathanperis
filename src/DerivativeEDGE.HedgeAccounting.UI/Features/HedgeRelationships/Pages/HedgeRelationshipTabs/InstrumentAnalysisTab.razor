@using DerivativeEdge.Blazor.ComponentLibrary.DpModal

@using DerivativeEDGE.HedgeAccounting.UI.Features.HedgeRelationships.Handlers.Queries
@using DerivativeEDGE.HedgeAccounting.UI.Features.HedgeRelationships.Models

@using DerivativeEdge.HedgeAccounting.Api.Client
@using Syncfusion.Blazor.Buttons

<div class="hedge-grid-container">
    <div class="action-bar-container">
        <div class="left-section"></div>
        <div class="right-section">
            <div class="dp-buttons">
                <SfButton CssClass="button-secondary button-default" Content="Select Existing Trade" OnClick='()=> SelectExistingTradeHandler("HedgeItem")' />
                <SfDropDownButton id="dp-dropdown-menu-style" CssClass="dp-dropdown-menu-style dropdown-menu-secondary" Content="New Trade">
                    <DropDownButtonEvents ItemSelected="OnNewTradeMenuItemSelected" />
                    <DropDownMenuItems>
                        @foreach (var item in MenuItems)
                        {
                            <DropDownMenuItem Text="@item.Text" Id="@item.Id"></DropDownMenuItem>
                        }
                    </DropDownMenuItems>
                </SfDropDownButton>
            </div>
        </div>
    </div>
    <DefaultGrid DataSource="@HedgedItems"
    TRowItem="DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM"
    Height="100%"
    AllowPaging="false"
    AllowSorting="true"
    AllowGrouping="false"
    AllowFiltering="false"
    AllowSelection="false"
    EnableVirtualization="false"
    EnableGlobalSearch="true"
    ShowColumnMenu="false"
    ShowToolBar="false"
    ShowExcelExportButton="false"
    ShowColumnPickerButton="false"
    OnDataBound="@OnHedgedItemChanged"
    OnRowDataBound="@OnHedgedItemChanged">
        <GridColumns>
            <GridColumn Field="@nameof(DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM.ItemID)" HeaderText="Hedged Item ID" Width="160" />
            <GridColumn Field="@nameof(DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM.Description)" HeaderText="Description" ClipMode="ClipMode.EllipsisWithTooltip" />
            <GridColumn Field="@nameof(DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM.Notional)" HeaderText="Notional" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="200">
                <Template>
                    @{
                        var model = (DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM)context;
                    }
                    <span class="@(model.Notional > 0 ? "" : "negative-numbers")">
                        @string.Format("{0:$#,##0.00;($#,##0.00)}", model.Notional)
                    </span>
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM.Rate)" HeaderText="Rate" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="120">
                <Template>
                    @{
                        var model = (DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM)context;
                    }
                    <span>
                        @string.Format("{0:0.00000%}", model.Rate)
                    </span>
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM.Spread)" HeaderText="Spread" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="120">
                <Template>
                    @{
                        var model = (DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM)context;
                    }
                    <span>
                        @string.Format("{0:0.000}bps", model.Spread * 10000)
                    </span>
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM.EffectiveDate)" HeaderText="Start Date" Width="160" />
            <GridColumn Field="@nameof(DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM.MaturityDate)" HeaderText="Maturity Date" Width="160" />
            <GridColumn Field="@nameof(DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM.ItemStatus)" HeaderText="Trade Status" Width="160" />
            <GridColumn HeaderText="Action" TextAlign="TextAlign.Center" Width="80" Freeze="FreezeDirection.Right" IsFrozen="true">
                <Template>
                    @if (context != null)
                    {
                        var model = (DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM)context;
                        <i class="fa-solid fa-trash-can" style="cursor: pointer;" @onclick="() => RemoveHedgedItem(model)" title="Remove item"></i>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </DefaultGrid>
</div>
<div class="hedge-grid-container">
    <div class="action-bar-container">
        <div class="left-section"></div>
        <div class="right-section">
            <div class="dp-buttons">
                <SfButton CssClass="button-secondary button-default" Content="Select Existing Trade" OnClick='()=> SelectExistingTradeHandler("HedgingItem")' />
                <SfDropDownButton CssClass="dp-dropdown-menu-style dropdown-menu-secondary" Content="New Trade">
                    <DropDownButtonEvents ItemSelected="OnNewTradeMenuItemSelected" />
                    <DropDownMenuItems>
                        @foreach (var item in MenuItems)
                        {
                            <DropDownMenuItem Text="@item.Text" Id="@item.Id"></DropDownMenuItem>
                        }
                    </DropDownMenuItems>
                </SfDropDownButton>
            </div>
        </div>
    </div>
    <DefaultGrid DataSource="@HedgingItems"
    TRowItem="DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM"
    Height="100%"
    AllowPaging="false"
    AllowSorting="true"
    AllowGrouping="false"
    AllowFiltering="false"
    AllowSelection="false"
    EnableVirtualization="false"
    EnableGlobalSearch="true"
    ShowColumnMenu="false"
    ShowToolBar="false"
    ShowExcelExportButton="false"
    ShowColumnPickerButton="false"
    OnDataBound="@OnHedgingItemChanged"
    OnRowDataBound="@OnHedgingItemChanged">
        <GridColumns>
            <GridColumn Field="@nameof(HedgingItem.ItemID)" HeaderText="Hedging Item ID" Width="160" />
            <GridColumn Field="@nameof(HedgingItem.Description)" HeaderText="Description" ClipMode="ClipMode.EllipsisWithTooltip" />
            <GridColumn Field="@nameof(HedgingItem.Notional)" HeaderText="Notional" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="200">
                <Template>
                    @{
                        var model = (DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM)context;
                    }
                    <span class="@(model.Notional > 0 ? "" : "negative-numbers")">
                        @string.Format("{0:$#,##0.00;($#,##0.00)}", model.Notional)
                    </span>
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM.Rate)" HeaderText="Rate" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="120">
                <Template>
                    @{
                        var model = (DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM)context;
                    }
                    <span>
                        @string.Format("{0:0.00000%}", model.Rate)
                    </span>
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM.Spread)" HeaderText="Spread" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="120">
                <Template>
                    @{
                        var model = (DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM)context;
                    }
                    <span>
                        @string.Format("{0:0.000}bps", model.Spread * 10000)
                    </span>
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM.EffectiveDate)" HeaderText="Start Date" Width="160" />
            <GridColumn Field="@nameof(DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM.MaturityDate)" HeaderText="Maturity Date" Width="160" />
            <GridColumn Field="@nameof(DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM.ItemStatus)" HeaderText="Trade Status" Width="160" />
            <GridColumn HeaderText="Action" TextAlign="TextAlign.Center" Width="80" Freeze="FreezeDirection.Right" IsFrozen="true">
                <Template>
                    @if (context != null)
                    {
                        var model = (DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM)context;
                        <i class="fa-solid fa-trash-can" style="cursor: pointer;" @onclick="() => RemoveHedgingItem(model)" title="Remove item"></i>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </DefaultGrid>
</div>

<div class="col-xs-12">
    <div class="details-section-header">
        <h5>EFFECTIVENESS</h5>
    </div>
    <div class="details-section-body">
        <div class="dropdown-column">
            <div class="dropdown-column">
                <div class="form-group custom-dropdown-css dp-inputs">
                    <span class="input-label">Prospective Assessment Method</span>
                    <SfDropDownList TValue="long?"
                    CssClass="dropdown-input"
                    Enabled="true"
                    TItem="DropdownModel"
                    Placeholder="Select"
                    @bind-Value="HedgeRelationship.ProspectiveEffectivenessMethodID"
                    DataSource="@GetDropdownDatasource("assessmentmethod")">
                        <DropDownListEvents TValue="long?" TItem="DropdownModel" ValueChange="@OnEffectivenessSettingsChanged" />
                        <DropDownListFieldSettings Text="Text" Value="ID" />
                    </SfDropDownList>
                </div>
                <div class="form-group custom-dropdown-css dp-inputs">
                    <span class="input-label">Retrospective Assessment Method</span>
                    <SfDropDownList TValue="long?"
                    CssClass="dropdown-input"
                    Enabled="true"
                    TItem="DropdownModel"
                    Placeholder="Retrospective Assessment Method"
                    @bind-Value="HedgeRelationship.RetrospectiveEffectivenessMethodID"
                    DataSource="@GetDropdownDatasource("assessmentmethod")">
                        <DropDownListEvents TValue="long?" TItem="DropdownModel" ValueChange="@OnEffectivenessSettingsChanged" />
                        <DropDownListFieldSettings Text="Text" Value="ID" />
                    </SfDropDownList>
                </div>
            </div>
            <div class="dropdown-row">
                <div class="form-group custom-small-dropdown dp-inputs">
                    <span class="input-label">Report Currency</span>
                    <SfDropDownList TValue="string"
                        CssClass="dropdown-input"
                        Enabled="true"
                        TItem="HedgeCurrencyDropdownItem"
                        Placeholder="Select"
                        @bind-Value="HedgeRelationship.ReportCurrency"
                        DataSource="@Currency">
                            <DropDownListEvents TValue="string" TItem="HedgeCurrencyDropdownItem" ValueChange="@OnEffectivenessSettingsChanged" />
                            <DropDownListFieldSettings Text="LongName" Value="ShortName" />
                    </SfDropDownList>
                </div>
                <div class="form-group custom-small-dropdown dp-inputs">
                    <span class="input-label">Report Frequency</span>
                    <SfDropDownList TValue="DerivativeEDGEHAEntityEnumReportingFrequency?"
                        CssClass="dropdown-input"
                        Enabled="true"
                        TItem="ReportFrequencyDropdownModel"
                        Placeholder="Select"
                        Value="HedgeRelationship.ReportingFrequency"
                        DataSource="@GetReportFrequencyOptions()">
                            <DropDownListEvents TValue="DerivativeEDGEHAEntityEnumReportingFrequency?" TItem="ReportFrequencyDropdownModel" ValueChange="@OnReportingFrequencyChanged" />
                            <DropDownListFieldSettings Text="Text" Value="Value" />
                    </SfDropDownList>
                </div>
            </div>
        </div>
        <div class="custom-seperator"></div>
        <div class="dropdown-column">
            <div class="dropdown-column">
                <div class="dropdown-column">
                    <h5>Regression Settings:</h5>
                    <div class="dropdown-row">
                        <div class="custom-small-dropdown dp-inputs">
                            <span class="input-label">Period Count</span>
                            <SfNumericTextBox CssClass="input-textbox" Placeholder="Period Count" TValue="int" @bind-Value="HedgeRelationship.Observation" />
                        </div>
                        <div class="form-group custom-small-dropdown dp-inputs">
                            <span class="input-label">@HedgeRelationship.PeriodSize</span>
                            <SfDropDownList TValue="DerivativeEDGEHAEntityEnumPeriodSize"
                                CssClass="dropdown-input"
                                Enabled="true"
                                TItem="DropdownModel"
                                Placeholder="Select"
                                @bind-Value="HedgeRelationship.PeriodSize"
                                DataSource="@GetDropdownDatasource("periodsize")">
                                <DropDownListEvents TValue="DerivativeEDGEHAEntityEnumPeriodSize" TItem="DropdownModel" ValueChange="@OnEffectivenessSettingsChanged" />
                                    <DropDownListFieldSettings Text="Text" Value="Value" />
                            </SfDropDownList>
                        </div>
                    </div>
                </div>
                <div class="dropdown-column">
                    <h5>Regression:</h5>
                    <div class="section-row">
                        <div class="space-x-4 dp-inputs">
                            <SfRadioButton CssClass="input-radiobutton"
                            Label="Cumulative Changes"
                            Name="regressionType"
                            Value="cumulative"
                            @bind-Checked="@RegressionType" />
                            <SfRadioButton CssClass="input-radiobutton"
                            Label="Periodic Changes"
                            Name="regressionType"
                            Value="periodic"
                            @bind-Checked="@RegressionType" />
                            <SfCheckBox CssClass="input-checkbox" @bind-Checked="HedgeRelationship.EOM" Label="End Of Month" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<DpFullscreenModal ShowModal="IsSelectExistingTradeModal" HeaderText="@string.Concat(ExistingTradeModalHeaderText, " Item: Select Existing Trade")">
    <Content>
        <div class="select-existing-modal-container">
            @if (IsLoadingTradeData)
            {
                <div class="d-flex justify-content-center align-items-center" style="height: 400px;">
                    <SfSpinner @bind-Visible="@IsLoadingTradeData" Size="40" Type="SpinnerType.Tailwind" Label="Loading Trade Data..." />
                </div>
            }
            else
            {
                <div style="height: calc(100vh - 15.75rem)">
                    <DefaultGrid DataSource="@SelectExistingTrade"
                    TRowItem="TradeDto"
                    Height="100%"
                    AllowPaging="true"
                    AllowSorting="true"
                    AllowGrouping="false"
                    AllowFiltering="false"
                    AllowSelection="false"
                    EnableVirtualization="false"
                    EnableGlobalSearch="true"
                    ShowColumnMenu="false"
                    ShowExcelExportButton="false"
                    ShowColumnPickerButton="false"
                    ShowToolBar="true">
                        <GridColumns>
                            <GridColumn Field="@nameof(TradeDto.Name)" HeaderText="Deal Name" Width="160" />
                            <GridColumn Field="@nameof(TradeDto.CounterpartyName)" HeaderText="Counterparty Name" Width="200" />
                            <GridColumn Field="@nameof(TradeDto.TradeId)" HeaderText="DPI Id" Width="200" />

                            <GridColumn Field="@nameof(TradeDto.Notional)" HeaderText="Notional Amount" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="200">
                                <Template>
                                    @{
                                        var tradeNotional = (TradeDto)context;
                                    }
                                    <span class="@(tradeNotional.Notional > 0 ? "" : "negative-numbers")">
                                        @string.Format("{0:$#,##0.00;($#,##0.00)}", tradeNotional.Notional)
                                    </span>
                                </Template>
                            </GridColumn>

                            <GridColumn Field="@nameof(TradeDto.SecurityType)" HeaderText="Deal Type" />
                            <GridColumn Field="@nameof(TradeDto.Description)" HeaderText="Description" ClipMode="ClipMode.EllipsisWithTooltip" />
                            <GridColumn Field="@nameof(TradeDto.EffectiveDate)" HeaderText="Effective Date" Width="160" />
                            <GridColumn Field="@nameof(TradeDto.MaturityDate)" HeaderText="Maturity Date" Width="160" />

                            <GridColumn HeaderText="Action" TextAlign="TextAlign.Center" Width="80" Freeze="FreezeDirection.Right" IsFrozen="true">
                                <Template>
                                    @if (context != null)
                                    {
                                        var tradeAction = (TradeDto)context;
                                        <i class="fa-solid fa-link" style="cursor: pointer;" @onclick="() => LinkTradeToHedging(tradeAction)" title="Link trade to hedging"></i>
                                    }
                                </Template>
                            </GridColumn>
                        </GridColumns>

                    </DefaultGrid>
                </div>
            }
        </div>
    </Content>
    <FooterContent>
        <div class="dp-buttons">
            <SfButton CssClass="button-link button-default" OnClick="CloseSelectExistingTradeModal" Content="Cancel"></SfButton>
        </div>
    </FooterContent>
</DpFullscreenModal>

@code {
    #region Injected Services
    [Inject] private IMediator Mediator { get; set; }
    [Inject] private IJSRuntime JS { get; set; }
    #endregion

    #region Parameters
    [Parameter] public DerivativeEDGEHAApiViewModelsHedgeRelationshipVM HedgeRelationship { get; set; }
    [Parameter] public EventCallback<DerivativeEDGEHAApiViewModelsHedgeRelationshipVM> HedgeRelationshipChanged { get; set; }
    #endregion

    #region Public Properties
    public DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM HedgedItem { get; set; } = new();
    public List<DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM> HedgedItems { get; set; } = new();
    public DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM HedgingItem { get; set; } = new();
    public List<DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM> HedgingItems { get; set; } = new();
    public List<TradeDto> SelectExistingTrade { get; set; } = new();
    public bool IsSelectExistingTradeModal { get; set; }
    public bool IsLoadingTradeData { get; set; }
    #endregion

    #region Private Properties
    private List<HedgeCurrencyDropdownItem> Currency { get; set; } = new();
    private string ExistingTradeModalHeaderText { get; set; }
    #endregion

    #region Radio Button Properties
    // Radio button properties for mutual exclusivity
    private string RegressionType
    {
        get
        {
            if (HedgeRelationship?.CumulativeChanges == true)
                return "cumulative";
            else if (HedgeRelationship?.PeriodicChanges == true)
                return "periodic";
            else
                return null; // Return null when neither is selected
        }
        set
        {
            if (HedgeRelationship != null)
            {
                HedgeRelationship.CumulativeChanges = value == "cumulative";
                HedgeRelationship.PeriodicChanges = value == "periodic";
                _ = Task.Run(async () => 
                {
                    await UpdateParentData();
                    await InvokeAsync(StateHasChanged);
                }); // Fire and forget with state update
            }
        }
    }
    #endregion

    #region Constants
    private static readonly List<DropDownMenuItem> MenuItems = new()
    {
        new DropDownMenuItem { Text = "Callable Debt", Id = "callabledebt" },
        new DropDownMenuItem { Text = "Cancelable", Id = "cancelable" },
        new DropDownMenuItem { Text = "Cap Floor", Id = "cap" },
        new DropDownMenuItem { Text = "Collar", Id = "collar" },
        new DropDownMenuItem { Text = "Debt", Id = "debt" },
        new DropDownMenuItem { Text = "Debt Option", Id = "debtoption" },
        new DropDownMenuItem { Text = "Swap", Id = "swap" },
        new DropDownMenuItem { Text = "Swap With Cap/Floor", Id = "swapwithoption" },
        new DropDownMenuItem { Text = "Swaption", Id = "swaption" },
        new DropDownMenuItem { Text = "Corridor", Id = "corridor" },
        new DropDownMenuItem { Text = "FX Forward", Id = "fxforward" }
    };

    public class DropDownMenuItem
    {
        public string Text { get; set; } = string.Empty;
        public string Id { get; set; } = string.Empty;
    }
    #endregion

    #region Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        await LoadCurrency();
        // Don't load instrument data here as HedgeRelationship parameter might not be set yet
    }

    // Commented for causing infinite loop issues
    // protected override async Task OnParametersSetAsync()
    // {
    //     await LoadInstrumentAnalysisData();
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadInstrumentAnalysisData();
        }
    }
    #endregion

    #region Data Loading Methods
    private async Task LoadInstrumentAnalysisData()
    {
        if (HedgeRelationship != null)
        {
            // Load the data
            HedgedItems = HedgeRelationship.HedgedItems?.ToList() ?? new List<DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM>();
            HedgingItems = HedgeRelationship.HedgingItems?.ToList() ?? new List<DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM>();

            // Ensure mutual exclusivity - if both are true (shouldn't happen), prefer Cumulative Changes
            if (HedgeRelationship.CumulativeChanges && HedgeRelationship.PeriodicChanges)
            {
                HedgeRelationship.PeriodicChanges = false;
            }

            // Force UI update to refresh grids
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            // Initialize empty lists if HedgeRelationship is null
            HedgedItems = new List<DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM>();
            HedgingItems = new List<DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM>();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadCurrency()
    {
        var response = await Mediator.Send(new GetHedgeRelationshipCurrencyList.Query());
        response.Currency.Insert(0, new HedgeCurrencyDropdownItem { LongName = "None", ShortName = "" }); // Add the "None" option
        Currency = response.Currency;

        // Check if current ReportCurrency exists in the response, if not set to "None"
        if (HedgeRelationship != null)
        {
            // If ReportCurrency is null, empty, or not found in the currency list, set to "None" (empty string)
            if (string.IsNullOrWhiteSpace(HedgeRelationship.ReportCurrency) ||
                !Currency.Any(c => c.ShortName == HedgeRelationship.ReportCurrency))
            {
                HedgeRelationship.ReportCurrency = ""; // Represents "None"
            }
        }
    }

    private async Task LoadHedgeTradeList()
    {
        IsLoadingTradeData = true;

        try
        {
            var query = new GetTradeDataSource.Query
                {
                    ClientId = HedgeRelationship.ClientID,
                    BankEntityId = HedgeRelationship.BankEntityID
                };

            var response = await Mediator.Send(query);

            if (response.IsSuccess)
            {
                SelectExistingTrade = response.TradeData ?? new List<TradeDto>();
            }
            else
            {
                // Handle error - you might want to show a toast/alert here
                Console.WriteLine($"Error loading trade data: {response.ErrorMessage}");
                SelectExistingTrade = new List<TradeDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception loading trade data: {ex.Message}");
            SelectExistingTrade = new List<TradeDto>();
        }
        finally
        {
            IsLoadingTradeData = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void CloseSelectExistingTradeModal()
    {
        IsSelectExistingTradeModal = false;
        SelectExistingTrade = new List<TradeDto>(); // Clear data when closing
        IsLoadingTradeData = false; // Reset loading state
    }

    /// <summary>
    /// Public method to force refresh of grid data - can be called when tab becomes visible
    /// </summary>
    public async Task RefreshGridData()
    {
        await LoadInstrumentAnalysisData();
    }
    #endregion
    #region Event Handlers
    private async Task UpdateParentData()
    {
        if (HedgeRelationship != null)
        {
            HedgeRelationship.HedgedItem = HedgedItem;
            HedgeRelationship.HedgedItems = HedgedItems ?? new List<DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM>();
            HedgeRelationship.HedgingItem = HedgingItem;
            HedgeRelationship.HedgingItems = HedgingItems ?? new List<DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM>();
            await HedgeRelationshipChanged.InvokeAsync(HedgeRelationship);
        }
    }

    // Grid event handlers for data synchronization
    public async Task OnHedgedItemChanged()
    {
        await UpdateParentData();
        await InvokeAsync(StateHasChanged);
    }

    public async Task OnHedgingItemChanged()
    {
        await UpdateParentData();
        await InvokeAsync(StateHasChanged);
    }

    // Method to handle form field changes (effectiveness settings, etc.)
    public async Task OnEffectivenessSettingsChanged(object args = null)
    {
        await UpdateParentData();
        await InvokeAsync(StateHasChanged);
    }

    // Specific handler for reporting frequency changes
    private async Task OnReportingFrequencyChanged(Syncfusion.Blazor.DropDowns.ChangeEventArgs<DerivativeEDGEHAEntityEnumReportingFrequency?, ReportFrequencyDropdownModel> args)
    {
        if (HedgeRelationship != null)
        {
            HedgeRelationship.ReportingFrequency = args.Value.GetValueOrDefault();
            await UpdateParentData();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SelectExistingTradeHandler(string hedgeType)
    {
        ExistingTradeModalHeaderText = hedgeType == "HedgeItem" ? "Hedged" : "Hedging";

        // Open modal immediately with empty data and loading state
        SelectExistingTrade = new List<TradeDto>(); // Start with empty data
        IsSelectExistingTradeModal = true;

        // Load data asynchronously after modal is shown for both hedge types
        _ = Task.Run(async () => await LoadHedgeTradeList());
    }

    private async Task RemoveHedgedItem(DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM item)
    {
        if (item != null && HedgedItems != null)
        {
            HedgedItems.Remove(item);
            HedgedItems = HedgedItems.ToList(); // Force collection refresh
            await UpdateParentData();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task RemoveHedgingItem(DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM item)
    {
        if (item != null && HedgingItems != null)
        {
            HedgingItems.Remove(item);
            HedgingItems = HedgingItems.ToList(); // Force collection refresh
            await UpdateParentData();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LinkTradeToHedging(TradeDto trade)
    {
        try
        {
            var query = new GetTradesForHedging.Query(trade.Id, HedgeRelationship.ClientID);
            var response = await Mediator.Send(query);

            var hedgeItemVM = response.HedgeItem;

            if (hedgeItemVM is not null)
            {
                if (ExistingTradeModalHeaderText == "Hedged")
                {
                    hedgeItemVM.HedgeRelationshipID = HedgeRelationship.ID;
                    hedgeItemVM.HedgeRelationshipItemType = DerivativeEDGEHAEntityEnumHedgeRelationshipItemType.HedgedItem;

                    HedgedItem = hedgeItemVM;
                    HedgedItems.Add(hedgeItemVM);
                    HedgedItems = HedgedItems.ToList(); // Force collection refresh
                }
                else if (ExistingTradeModalHeaderText == "Hedging")
                {
                    hedgeItemVM.HedgeRelationshipID = HedgeRelationship.ID;
                    hedgeItemVM.HedgeRelationshipItemType = DerivativeEDGEHAEntityEnumHedgeRelationshipItemType.HedgingItem;

                    HedgingItem = hedgeItemVM;
                    HedgingItems.Add(hedgeItemVM);
                    HedgingItems = HedgingItems.ToList(); // Force collection refresh
                }

                await UpdateParentData();
                CloseSelectExistingTradeModal();
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                Console.WriteLine("Error: No hedge item was returned from the service.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception linking trade: {ex.Message}");
        }
    }

    private DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM ConvertToHedgedItem(DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM item)
    {
        return new DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM
        {
            ID = item.ID,
            HedgeRelationshipItemLegs = item.HedgeRelationshipItemLegs,
            HedgeRelationshipItemType = DerivativeEDGEHAEntityEnumHedgeRelationshipItemType.HedgedItem,
            ItemID = item.ItemID,
            Description = item.Description,
            Notional = item.Notional,
            Spread = item.Spread,
            Rate = item.Rate,
            EffectiveDate = item.EffectiveDate,
            MaturityDate = item.MaturityDate,
            ItemStatus = item.ItemStatus,
            ItemStatusText = item.ItemStatusText,
            SecurityType = item.SecurityType
        };
    }

    private DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM ConvertToHedgingItem(DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM item)
    {
        return new DerivativeEDGEHAApiViewModelsHedgeRelationshipItemVM
        {
            ID = item.ID,
            HedgeRelationshipItemLegs = item.HedgeRelationshipItemLegs,
            HedgeRelationshipItemType = DerivativeEDGEHAEntityEnumHedgeRelationshipItemType.HedgingItem,
            ItemID = item.ItemID,
            Description = item.Description,
            Notional = item.Notional,
            Spread = item.Spread,
            Rate = item.Rate,
            EffectiveDate = item.EffectiveDate,
            MaturityDate = item.MaturityDate,
            ItemStatus = item.ItemStatus,
            ItemStatusText = item.ItemStatusText,
            SecurityType = item.SecurityType
        };
    }
    #endregion

    #region Helper Methods
    public IEnumerable<DropdownModel> GetDropdownDatasource(string dataSet = "entity")
    {
        return dataSet.ToLower() switch
        {
            "assessmentmethod" => GetAssessmentMethodOptions(),
            "periodsize" => GetPeriodSizeOptions(),
            _ => throw new ArgumentException($"Invalid data set: {dataSet}")
        };
    }

    private static IEnumerable<DropdownModel> GetAssessmentMethodOptions()
    {
        return new List<DropdownModel>
        {
            new() { ID = 0, Text = "None" },
            new() { ID = 1, Text = "Regression - Change in Fair Value" },
            new() { ID = 2, Text = "Dollar Offset" },
            new() { ID = 3, Text = "Cummulative Dollar Offset" },
            new() { ID = 4, Text = "Index Regression" },
            new() { ID = 5, Text = "Cumulative Index Regression" },
            new() { ID = 6, Text = "Scenario Analysis" },
            new() { ID = 7, Text = "Scenario Regression" },
            new() { ID = 9, Text = "Cumulative Dollar Offset" },
        };
    }

    private static IEnumerable<ReportFrequencyDropdownModel> GetReportFrequencyOptions()
    {
        return new List<ReportFrequencyDropdownModel>
        {
            new() { Value = null, Text = "None" },
            new() { Value = DerivativeEDGEHAEntityEnumReportingFrequency.Monthly, Text = "Monthly" },
            new() { Value = DerivativeEDGEHAEntityEnumReportingFrequency.Quarterly, Text = "Quarterly" }
        };
    }

    private static IEnumerable<DropdownModel> GetPeriodSizeOptions()
    {
        return new List<DropdownModel>
        {
            new() { Value = "None", Text = "None" },
            new() { Value = "Week", Text = "Week" },
            new() { Value = "Month", Text = "Month" },
            new() { Value = "Quarter", Text = "Quarter" },
        };
    }
    #endregion

    #region Trade Management Methods
    private void OnNewTradeMenuItemSelected(MenuEventArgs args)
    {
        var url = GetNewTradeUrl(args.Item.Id);
        if (!string.IsNullOrEmpty(url))
        {
            OpenUrlInNewTab(url);
        }
    }

    private void OpenUrlInNewTab(string url)
    {
        // Use JS interop to open a new tab
        JS.InvokeVoidAsync("window.open", url, "_blank");
    }

    private void OpenNewTrade(string type, string itemType)
    {
        var url = "";
        var oppId = "0";
        var entityId = HedgeRelationship?.BankEntityID != null && HedgeRelationship.BankEntityID != 0 
            ? HedgeRelationship.BankEntityID.ToString() 
            : HedgeRelationship?.ClientID.ToString() ?? "0";
        var title = "";
        var securityType = "";

        // Set the item type for the current operation
        CurrentHedgeRelationshipItemType = itemType;

        switch (type.ToLower())
        {
            case "callabledebt":
                url = $"/CallableDebt/ShowAddCallableDebt?id={entityId}&oppId={oppId}";
                title = "Callable Debt";
                securityType = "CallableDebt";
                break;
            case "cancelable":
                url = $"/Cancelable/ShowAddCancelable?id={entityId}&oppId={oppId}";
                title = "Cancelable";
                securityType = "Cancelable";
                break;
            case "cap":
                url = $"/CapFloor/ShowAddCapFloor?id={entityId}&oppId={oppId}";
                title = "Cap Floor";
                securityType = "CapFloor";
                break;
            case "collar":
                url = $"/Collar/Add?cId={entityId}&returnPartial=true";
                title = "Collar";
                securityType = "Collar";
                break;
            case "debt":
                url = $"/Debt/AddDebt?cId={entityId}&returnPartial=true";
                title = "Debt";
                securityType = "Debt";
                break;
            case "debtoption":
                url = $"/DebtOption/ShowAddDebtOption?id={entityId}&oppId={oppId}";
                title = "Debt Option";
                securityType = "DebtOption";
                break;
            case "swap":
                url = $"/Swap/ShowAddSwap?id={entityId}&oppId={oppId}";
                title = "Swap";
                securityType = "Swap";
                break;
            case "swapwithoption":
                url = $"/SwapEmbeddedOption/Add?cId={entityId}&returnPartial=true";
                title = "Swap With Option";
                securityType = "SwapWithOption";
                break;
            case "swaption":
                url = $"/Swaption/ShowAddSwaption?id={entityId}&oppId={oppId}";
                title = "Swaption";
                securityType = "Swaption";
                break;
            case "corridor":
                url = $"/Corridor/Add?cId={entityId}&returnPartial=true";
                title = "Corridor";
                securityType = "Corridor";
                break;
            case "fxforward":
                url = $"/FxSingle/Add?cId={entityId}&type=11&returnPartial=true";
                title = "FX Forward";
                securityType = "FxForward";
                break;
            default:
                // Handle unknown trade type
                Console.WriteLine($"Unknown trade type: {type}");
                return;
        }

        OpenNgDialogForTrade(url, title, securityType);
    }

    private void OpenNgDialogForTrade(string url, string title, string securityType)
    {
        var dialogTitle = "Trade Information";
        if (!string.IsNullOrEmpty(title))
        {
            dialogTitle = $"{dialogTitle} - {title}";
        }

        // TODO: Implement the actual dialog opening logic based on your Blazor dialog system
        // This is where you would integrate with your modal/dialog component
        
        // For now, just logging the parameters - replace this with your actual dialog implementation
        Console.WriteLine($"Opening dialog: {dialogTitle}");
        Console.WriteLine($"URL: {url}");
        Console.WriteLine($"Security Type: {securityType}");
        Console.WriteLine($"Item Type: {CurrentHedgeRelationshipItemType}");

        // Example of how you might implement this with a custom modal component:
        // await ModalService.OpenAsync<TradeInformationDialog>(
        //     new Dictionary<string, object>
        //     {
        //         { "Url", url },
        //         { "Title", dialogTitle },
        //         { "SecurityType", securityType },
        //         { "ItemType", CurrentHedgeRelationshipItemType }
        //     });
    }

    // Property to track the current item type for trade operations
    private string CurrentHedgeRelationshipItemType { get; set; } = "HedgedItem";
    #endregion

    #region Models
    public class DropdownModel
    {
        public int ID { get; set; }
        public string Text { get; set; }
        public string Value { get; set; }
    }

    public class ReportFrequencyDropdownModel
    {
        public DerivativeEDGEHAEntityEnumReportingFrequency? Value { get; set; }
        public string Text { get; set; }
    }
    #endregion

    private string GetNewTradeUrl(string type)
    {
        var clientId = HedgeRelationship?.ClientID.ToString() ?? "0";
        return type.ToLower() switch
        {
            "callabledebt" => $"/CallableDebt/Add?clientId={clientId}",
            "cancelable" => $"/Cancelable/Add?clientId={clientId}",
            "cap" => $"/CapFloor/Add?clientId={clientId}",
            "collar" => $"/Collar/Add?clientId={clientId}",
            "debt" => $"/Debt/Add?clientId={clientId}",
            "debtoption" => $"/DebtOption/Add?clientId={clientId}",
            "swap" => $"/Swap/Add?clientId={clientId}",
            "swapwithoption" => $"/SwapEmbeddedOption/Add?clientId={clientId}",
            "swaption" => $"/Swaption/Add?clientId={clientId}",
            "corridor" => $"/Corridor/Add?clientId={clientId}",
            "fxforward" => $"/FxSingle/Add?clientId={clientId}",
            _ => null
        };
    }
}