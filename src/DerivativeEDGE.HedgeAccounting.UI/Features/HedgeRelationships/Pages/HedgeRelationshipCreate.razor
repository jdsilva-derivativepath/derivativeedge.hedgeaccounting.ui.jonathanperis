@using System.ComponentModel.DataAnnotations
@using System.Text
@using DerivativeEDGE.HedgeAccounting.UI.Features.HedgeRelationships.Handlers.Commands
@using DerivativeEDGE.HedgeAccounting.UI.Features.HedgeRelationships.Handlers.Queries
@using DerivativeEDGE.HedgeAccounting.UI.Features.HedgeRelationships.Models
@using DerivativeEdge.Blazor.ComponentLibrary.DpModal
@using DerivativeEdge.HedgeAccounting.Api.Client
@using MediatR

@inherits FormMessageComponentBase

@inject IMediator Mediator
@inject IJSRuntime IJSRuntime
@inject IAlertService AlertService
@inject NavigationManager NavManager

<DpFullscreenModal ShowModal="ShowNewProcessModal" HeaderText="New Hedge Relationship">
    <Content>
        <EditForm Model="@HedgeRelationship" OnValidSubmit="RequestNewHedgeRelationship" OnInvalidSubmit="OnInvalidSubmit">
            <DataAnnotationsValidator />
            <button type="submit" style="display:none" id="hiddenSubmit"></button>
            <div class="custom-form-container">
                <div style="width: 100%;">
                    <SfMessage Severity="MessageSeverityType" Visible="IsMessageVisible">
                        <h1>@MessageTitle</h1>
                        <p>@MessageBody</p>
                    </SfMessage>
                </div>
                <div class="flex mt-2.5 gap-3 w-full justify-center flex-wrap">
                    <div class="rounded border border-gray-300 bg-white shadow-lg">
                        <div class="flex py-3 px-4 items-center gap-2 border-b border-gray-300 w-full">
                            RELATIONSHIP INFORMATION
                        </div>
                        <div class="flex p-5 flex-col items-start gap-3">
                            <div class="">
                                <div class="form-group dp-inputs">
                                    <span class="input-label">Client</span>
                                    <SfDropDownList TValue="long" TItem="Client"
                                        CssClass="dropdown-input"
                                        DataSource="@AvailableClients"
                                        Enabled="@(!IsLoadingClients)"
                                        Placeholder="@(IsLoadingClients ? "Loading..." : "Select Client")"
                                        @bind-Value="HedgeRelationship.ClientID">
                                        <DropDownListEvents TValue="long" TItem="Client" ValueChange="@HandleClientValueChangeAsync"></DropDownListEvents>
                                        <DropDownListFieldSettings Value="ClientId" Text="ClientName" />
                                    </SfDropDownList>
                                    <ValidationMessage For="@(() => HedgeRelationship.ClientID)" />
                                </div>
                                <div class="form-group dp-inputs">
                                    <span class="input-label">Entity</span>
                                    <SfDropDownList TValue="long" TItem="Entity"
                                        CssClass="dropdown-input"
                                        DataSource="@AvailableEntities"
                                        Enabled="@(!IsLoadingEntities && AvailableEntities?.Any() == true)"
                                        Placeholder="@(IsLoadingEntities ? "Loading..." : "Select a client first")"
                                        @bind-Value="HedgeRelationship.BankEntityID">
                                        <DropDownListFieldSettings Value="@nameof(Entity.EntityId)" Text="@nameof(Entity.EntityLongName)" />
                                    </SfDropDownList>
                                    <ValidationMessage For="@(() => HedgeRelationship.BankEntityID)" />
                                </div>
                                <div class="form-group ">
                                    <div class="dp-inputs">
                                        <span class="input-label">Description</span>
                                        <SfTextBox CssClass="input-textbox" Placeholder="Description" @bind-Value="HedgeRelationship.Description" />
                                    </div>
                                </div>
                                <div class="form-group dp-inputs">
                                    <span class="input-label">Hedge Risk *</span>
                                    <SfComboBox TValue="DerivativeEDGEHAEntityEnumHedgeRiskType"
                                        CssClass="dropdown-input"
                                        Enabled="true"
                                        TItem="DropdownModel"
                                        @bind-Value="HedgeRelationship.HedgeRiskType"
                                        Placeholder="Hedge Risk"
                                        DataSource="@GetDropdownDatasource("hedgerisktype")">
                                            <ComboBoxEvents TValue="DerivativeEDGEHAEntityEnumHedgeRiskType" TItem="DropdownModel" />
                                            <ComboBoxFieldSettings Value="Value" Text="Text" />
                                    </SfComboBox>
                                    <ValidationMessage For="@(() => HedgeRelationship.HedgeRiskType)" />
                                </div>
                                <div class="form-group dp-inputs">
                                    <span class="input-label">Hedge Type *</span>
                                    <SfComboBox TValue="DerivativeEDGEHAEntityEnumHRHedgeType" CssClass="dropdown-input" Enabled="true" TItem="DropdownModel" @bind-Value="HedgeRelationship.HedgeType" Placeholder="Hedge Type" DataSource="@GetDropdownDatasource("hedgetype")">
                                        <ComboBoxEvents TValue="DerivativeEDGEHAEntityEnumHRHedgeType" TItem="DropdownModel" />
                                        <ComboBoxFieldSettings Value="Value" Text="Text" />
                                    </SfComboBox>
                                    <ValidationMessage For="@(() => HedgeRelationship.HedgeType)" />
                                </div>
                                <div class="form-group dp-inputs">
                                    <label class="input-label">Designation Date</label>
                                    <SfDatePicker TValue="DateTimeOffset" @bind-Value="HedgeRelationship.DesignationDate" CssClass="calendar-datepicker" Enabled="true" Format="MM/dd/yyyy" Placeholder="mm/dd/yyyy" ShowClearButton="true" Max="@DateTime.Today">
                                        <DatePickerEvents TValue="DateTimeOffset" />
                                    </SfDatePicker>
                                    <ValidationMessage For="@(() => HedgeRelationship.DesignationDate)" />
                                </div>
                                <div class="form-group dp-inputs">
                                    <label class="input-label">Dedesignation Date</label>
                                    <SfDatePicker TValue="DateTimeOffset?" @bind-Value="HedgeRelationship.DedesignationDate" CssClass="calendar-datepicker" Enabled="true" Format="MM/dd/yyyy" Placeholder="mm/dd/yyyy" ShowClearButton="true">
                                        <DatePickerEvents TValue="DateTimeOffset?" />
                                    </SfDatePicker>
                                </div
                                <div class="form-group dp-inputs">
                                    <span class="input-label">Hedge Item Type</span>
                                    <SfComboBox TValue="DerivativeEDGEHAEntityEnumHedgedItemType" CssClass="dropdown-input" Enabled="true" TItem="DropdownModel" @bind-Value="HedgeRelationship.HedgedItemType" Placeholder="Hedge Item Type" DataSource="@GetDropdownDatasource("hedgeditemtype")">
                                        <ComboBoxEvents TValue="DerivativeEDGEHAEntityEnumHedgedItemType" TItem="DropdownModel" />
                                        <ComboBoxFieldSettings Value="Value" Text="Text" />
                                    </SfComboBox>
                                </div>
                                <div class="form-group dp-inputs">
                                    <span class="input-label">Hedge Item</span>
                                    <SfComboBox TValue="DerivativeEDGEHAEntityEnumAssetLiability" CssClass="dropdown-input" Enabled="true" TItem="DropdownModel" @bind-Value="HedgeRelationship.AssetLiability" Placeholder="Hedge Item" DataSource="@GetDropdownDatasource("assetliability")">
                                        <ComboBoxEvents TValue="DerivativeEDGEHAEntityEnumAssetLiability" TItem="DropdownModel" />
                                        <ComboBoxFieldSettings Value="Value" Text="Text" />
                                    </SfComboBox>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="rounded border border-gray-300 bg-white shadow-lg">
                        <div class="flex py-3 px-4 items-center gap-2 border-b border-gray-300 w-full">
                            ACCOUNTING
                        </div>
                        <div class="flex p-5 flex-col items-start gap-3">
                            <div class="">
                                <div class="form-group dp-inputs">
                                    <span class="input-label">Standard</span>
                                    <SfComboBox TValue="DerivativeEDGEHAEntityEnumStandard" CssClass="dropdown-input" Enabled="true" TItem="DropdownModel" @bind-Value="HedgeRelationship.Standard" Placeholder="Standard" DataSource="@GetDropdownDatasource("standard")">
                                        <ComboBoxEvents TValue="DerivativeEDGEHAEntityEnumStandard" TItem="DropdownModel" />
                                        <ComboBoxFieldSettings Value="Value" Text="Text" />
                                    </SfComboBox>
                                </div>
                                <div class="space-x-4 dp-inputs">
                                    <SfCheckBox CssClass="input-checkbox" @bind-Checked="HedgeRelationship.TaxPurposes" Label="Hedge for Tax Purposes" />
                                </div>
                                <div class="space-x-4 dp-inputs">
                                    <SfCheckBox CssClass="input-checkbox" @bind-Checked="HedgeRelationship.IsAnOptionHedge" Label="Hedge is an Option" />
                                </div>
                                <div class="form-group dp-inputs">
                                    <span class="input-label">Hedging Instrument Structure</span>
                                    <SfComboBox TValue="DerivativeEDGEHAEntityEnumHedgingInstrumentStructure" CssClass="dropdown-input" Enabled="true" TItem="DropdownModel" @bind-Value="HedgeRelationship.HedgingInstrumentStructure" Placeholder="Hedging Instrument Structure" DataSource="@GetDropdownDatasource("hedginginstrumentstructure")">
                                        <ComboBoxEvents TValue="DerivativeEDGEHAEntityEnumHedgingInstrumentStructure" TItem="DropdownModel" />
                                        <ComboBoxFieldSettings Value="Value" Text="Text"  />
                                    </SfComboBox>
                                </div>
                                @if (HedgeRelationship.IsAnOptionHedge)
                                {
                                    <div class="space-x-4 dp-inputs">
                                        <SfCheckBox CssClass="input-checkbox" @bind-Checked="HedgeRelationship.IsDeltaMatchOption" Label="Delta Match Option" />
                                    </div>
                                    <div class="space-x-4 dp-inputs">
                                        <SfCheckBox CssClass="input-checkbox" @bind-Checked="HedgeRelationship.AmortizeOptionPremimum" Label="Amortize Option Premium" />
                                    </div>
                                    <div class="form-group dp-inputs">
                                        <span class="input-label">Amortization Method</span>
                                        <SfComboBox TValue="DerivativeEDGEHAEntityEnumAmortizationMethod" CssClass="dropdown-input" Enabled="true" TItem="DropdownModel" @bind-Value="HedgeRelationship.AmortizationMethod" Placeholder="Amortization Method" DataSource="@GetDropdownDatasource("amortizationmethod")">
                                            <ComboBoxEvents TValue="DerivativeEDGEHAEntityEnumAmortizationMethod" TItem="DropdownModel" />
                                            <ComboBoxFieldSettings Value="Value" Text="Text" />
                                        </SfComboBox>
                                    </div>
                                    <div class="form-group">
                                        <div class="dp-inputs">
                                            <span class="input-label">Option Premium</span>
                                            <SfNumericTextBox CssClass="input-textbox" Placeholder="Option Premium" @bind-Value="HedgeRelationship.OptionPremium" />
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </Content>
    <FooterContent>
        <div class="dp-buttons">
            <SfButton CssClass="button-link button-default" OnClick="OnClickCancelHandler" Content="Cancel"></SfButton>
            <SfButton CssClass="button-primary button-default" Disabled="@(IsLoadingClients)" OnClick="@OnTriggerSubmitFromHeader" Content="Continue"></SfButton>
        </div>
    </FooterContent>
</DpFullscreenModal>

@code {
    public bool ShowNewProcessModal { get; set; }
    private List<Client> AvailableClients { get; set; } = new();
    private List<Entity> AvailableEntities { get; set; } = new();
    public DerivativeEDGEHAEntityHedgeRelationship HedgeRelationship { get; set; } = new();

    #region Loading States
    public bool IsLoadingClients { get; set; }
    public bool IsLoadingEntities { get; set; }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(LoadClientsAsync());
        StateHasChanged();
    }

    private void OnClickCancelHandler()
    {
        HideFormMessage();
        ShowNewProcessModal = false;
    }

    private async Task OnTriggerSubmitFromHeader()
    {
        await IJSRuntime.InvokeVoidAsync("triggerHiddenSubmit");
    }

    private async Task RequestNewHedgeRelationship(EditContext context)
    {
        HideFormMessage();

        // Manual validation: Entity selection
        var selectedEntity = AvailableEntities
            .FirstOrDefault(e => e.EntityId == HedgeRelationship.BankEntityID);

        if (HedgeRelationship.BankEntityID == 0 ||
            string.Equals(selectedEntity?.EntityLongName, "None", StringComparison.OrdinalIgnoreCase))
        {
            ShowCustomMessage(
                "Please fix the following errors:",
                "Please select a valid entity.",
                MapFormMessageTypeToSeverity(FormMessageType.ValidationError)
            );
            return; // Prevent submit
        }

        // Manual validation: DedesignationDate > DesignationDate
        if (HedgeRelationship.DedesignationDate <= HedgeRelationship.DesignationDate)
        {
            ShowCustomMessage(
                "Please fix the following errors:",
                "Dedesignation Date must be later than Designation Date",
                MapFormMessageTypeToSeverity(FormMessageType.ValidationError)
            );
            return; // Prevent submit
        }

        // Proceed with creating the relationship
        var result = await Mediator.Send(new CreateHedgeRelationship.Command(HedgeRelationship));
        if (!result.HasError)
        {
            ShowNewProcessModal = false;
            NavManager.NavigateTo($"{NavManager.BaseUri}hedgerelationship?id={result.Data.ID}");
        }
        else
        {
            await AlertService.ShowToast(result.Message, AlertKind.Error, "Failed", showButton: true);
        }
    }

    private void OnInvalidSubmit(EditContext context)
    {
        ShowFormMessage(FormMessageType.ValidationError);
    }

    private async Task LoadClientsAsync()
    {
        try
        {
            IsLoadingClients = true;
            StateHasChanged();

            var query = new GetClients.Query();
            var response = await Mediator.Send(query, CancellationToken.None);
            response.Clients.Insert(0, new Client { ClientId = 0, ClientName = "None" });
            AvailableClients = response.Clients;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await AlertService.ShowToast($"There was a problem retrieving the Client List: {ex.Message}", AlertKind.Error, "Error", showButton: true);
        }
        finally
        {
            IsLoadingClients = false;
        }
    }

    public async Task LoadClientEntitiesAsync(long? clientId)
    {
        try
        {
            IsLoadingEntities = true;

            // Clear entities if no client is selected (for DPI users)
            if (clientId == null || clientId == 0)
            {
                AvailableEntities = new List<Entity>();
                HedgeRelationship.BankEntityID = 0; // reset selection
                return;
            }

            var query = new GetClientEntities.Query(clientId);
            AvailableEntities = new List<Entity>();
            var response = await Mediator.Send(query, CancellationToken.None);

            response.Entities.Insert(0, new Entity { EntityId = 0, EntityLongName = "None" }); // Insert "None" option
            AvailableEntities = response.Entities;

            // If ClientID corresponds to "None" (EntityId = 0), reset BankEntityID
            if (clientId == 0 || string.Equals(
                    AvailableEntities.FirstOrDefault(e => e.EntityId == clientId)?.EntityLongName,
                    "None", StringComparison.OrdinalIgnoreCase))
            {
                HedgeRelationship.BankEntityID = 0;
            }
            else
            {
                var firstEntity = AvailableEntities.FirstOrDefault(e => e.EntityId != 0);
                HedgeRelationship.BankEntityID = firstEntity.EntityId;
            }

            SelectDefaultComboBoxValues();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await AlertService.ShowToast($"There was a problem retrieving the Entities List: {ex.Message}", AlertKind.Error, "Error", showButton: true);
        }
        finally
        {
            IsLoadingEntities = false;
        }
    }


    private void SelectDefaultComboBoxValues()
    {
        // Set default values for dropdowns using their respective enum types
        HedgeRelationship.HedgeRiskType = (DerivativeEDGEHAEntityEnumHedgeRiskType)Enum.GetValues(typeof(DerivativeEDGEHAEntityEnumHedgeRiskType)).GetValue(0);
        HedgeRelationship.HedgeType = (DerivativeEDGEHAEntityEnumHRHedgeType)Enum.GetValues(typeof(DerivativeEDGEHAEntityEnumHRHedgeType)).GetValue(0);
        HedgeRelationship.HedgedItemType = (DerivativeEDGEHAEntityEnumHedgedItemType)Enum.GetValues(typeof(DerivativeEDGEHAEntityEnumHedgedItemType)).GetValue(0);
        HedgeRelationship.AssetLiability = (DerivativeEDGEHAEntityEnumAssetLiability)Enum.GetValues(typeof(DerivativeEDGEHAEntityEnumAssetLiability)).GetValue(0);
        HedgeRelationship.Standard = (DerivativeEDGEHAEntityEnumStandard)Enum.GetValues(typeof(DerivativeEDGEHAEntityEnumStandard)).GetValue(0);
        HedgeRelationship.HedgingInstrumentStructure = (DerivativeEDGEHAEntityEnumHedgingInstrumentStructure)Enum.GetValues(typeof(DerivativeEDGEHAEntityEnumHedgingInstrumentStructure)).GetValue(0);
        HedgeRelationship.AmortizationMethod = (DerivativeEDGEHAEntityEnumAmortizationMethod)Enum.GetValues(typeof(DerivativeEDGEHAEntityEnumAmortizationMethod)).GetValue(0);
        HedgeRelationship.OptionPremium = 0;
    }

    public IEnumerable<DropdownModel<TEnum>> GetDropdownDatasource<TEnum>() where TEnum : struct, Enum
    {
        return Enum.GetValues(typeof(TEnum))
            .Cast<TEnum>()
            .Select(value => new DropdownModel<TEnum>
            {
                Value = value,
                Text = GetEnumDescription(value)
            });
    }

    public IEnumerable<DropdownModel> GetDropdownDatasource(string dataSet = "hedgedrisk")
    {
        switch (dataSet.ToLower())
        {
            case "hedgerisktype":
                return Enum.GetValues(typeof(DerivativeEDGEHAEntityEnumHedgeRiskType))
                    .Cast<DerivativeEDGEHAEntityEnumHedgeRiskType>()
                    .Select(value => new DropdownModel 
                    { 
                        Value = value.ToString(), 
                        Text = GetEnumDescription(value) 
                    });

            case "hedgetype":
                return Enum.GetValues(typeof(DerivativeEDGEHAEntityEnumHRHedgeType))
                    .Cast<DerivativeEDGEHAEntityEnumHRHedgeType>()
                    .Select(value => new DropdownModel 
                    { 
                        Value = value.ToString(), 
                        Text = GetEnumDescription(value) 
                    });

            case "hedgeditemtype":
                return Enum.GetValues(typeof(DerivativeEDGEHAEntityEnumHedgedItemType))
                    .Cast<DerivativeEDGEHAEntityEnumHedgedItemType>()
                    .Select(value => new DropdownModel 
                    { 
                        Value = value.ToString(), 
                        Text = GetEnumDescription(value) 
                    });

            case "assetliability":
                return Enum.GetValues(typeof(DerivativeEDGEHAEntityEnumAssetLiability))
                    .Cast<DerivativeEDGEHAEntityEnumAssetLiability>()
                    .Select(value => new DropdownModel 
                    { 
                        Value = value.ToString(), 
                        Text = GetEnumDescription(value) 
                    });

            case "standard":
                return Enum.GetValues(typeof(DerivativeEDGEHAEntityEnumStandard))
                    .Cast<DerivativeEDGEHAEntityEnumStandard>()
                    .Select(value => new DropdownModel 
                    { 
                        Value = value.ToString(), 
                        Text = GetEnumDescription(value) 
                    });

            case "hedginginstrumentstructure":
                return Enum.GetValues(typeof(DerivativeEDGEHAEntityEnumHedgingInstrumentStructure))
                    .Cast<DerivativeEDGEHAEntityEnumHedgingInstrumentStructure>()
                    .Select(value => new DropdownModel 
                    { 
                        Value = value.ToString(), 
                        Text = GetEnumDescription(value) 
                    });

            case "amortizationmethod":
                return Enum.GetValues(typeof(DerivativeEDGEHAEntityEnumAmortizationMethod))
                    .Cast<DerivativeEDGEHAEntityEnumAmortizationMethod>()
                    .Select(value => new DropdownModel 
                    { 
                        Value = value.ToString(), 
                        Text = GetEnumDescription(value) 
                    });

            default:
                throw new ArgumentException("Invalid data set");
        }
    }

    private string GetEnumDescription<TEnum>(TEnum value) where TEnum : Enum
    {
        // Get attribute description if available, otherwise use the enum value name
        var field = value.GetType().GetField(value.ToString());
        var attributes = (EnumDescriptionAttribute[])field.GetCustomAttributes(typeof(EnumDescriptionAttribute), false);

        return attributes.Length > 0
            ? attributes[0].Description
            : value.ToString();
    }

    public class DropdownModel
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }

    public class DropdownModel<TEnum> where TEnum : struct, Enum
    {
        public string Text { get; set; }
        public TEnum Value { get; set; }
    }

    private async Task HandleClientValueChangeAsync()
    {
        AvailableEntities = new List<Entity>();
        await LoadClientEntitiesAsync(HedgeRelationship.ClientID);
    }
}

